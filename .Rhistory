# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# aÃ±ado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# lo tengo?
names(mapCol_idh)
library(RColorBrewer)
library(classInt)
#variable a colorear
varToPLot=mapCol_idh$cluster
# decidir color:
unique(varToPLot)
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
#preparo colores
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
# grafico mapa basico
plot(mapCol,col='grey',border=0)
# grafico mapa cluster
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
par(mfrow=c(2,2))
demoTable=table(colb[,1])
names(demoTable)=level4
demoTableRel=round(prop.table(demoTable)*100,1)
title='Democracia'
paleta='red'
demoTableRelPlot=barplot(demoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
###
ecoTable=table(colb[,3])
names(ecoTable)=level5
ecoTableRel=round(prop.table(ecoTable)*100,1)
title='Libertad EconÃ³mica'
paleta='red'
barplot(ecoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
#####
worldTable=table(colb[,4])
names(worldTable)=level3
worldTableRel=round(prop.table(worldTable)*100,1)
title='Libertad en el Mundo'
paleta='red'
barplot(worldTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
hist(colb$IDH)
hist(colb$IDH,main="Histograma IDH",ylab="Frecuencia", xlab = "IDH")
hist(colb$Poblacion.Cabecera,main="Histograma Población Cabecera",ylab="Frecuencia", xlab = "Pob. Cabecera")
hist(colb$Poblacion.Resto,main="Histograma Población Resto",ylab="Frecuencia", xlab = "Pob. Resto")
colb$cabeLog=log(colb$PoblaciÃ³n.Cabecera)
colb$restoLog=log(colb$PoblaciÃ³n.Resto)
hist(colb$cabeLog)
hist(colb$restoLog)
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
corrDem
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
#ver:
corrTableX
plot(colb[,explanans])
plot(colb[,explanans])
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
# que variables y tipo
str(colb)
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
summary(colb)
hist(colb$IDH)
hist(colb$PoblaciÃ³n.Cabecera)
hist(colb$PoblaciÃ³n.Resto)
colb$cabeLog=log(colb$PoblaciÃ³n.Cabecera)
colb$restoLog=log(colb$PoblaciÃ³n.Resto)
hist(colb$cabeLog)
hist(colb$restoLog)
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
hist(colb$IDH)
hist(colb$Poblacion.Cabecera)
hist(colb$Poblacion.Resto)
colb$cabeLog=log(colb$Poblacion.Cabecera)
colb$restoLog=log(colb$Poblacion.Resto)
hist(colb$cabeLog)
hist(colb$restoLog)
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
corrDem
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
#ver:
corrTableX
plot(colb[,explanans])
LinRegA = lm(IDH ~ ., data = colb[,c(1,7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
#resultados
summary(LinRegA)
install.packages("stargazer")
LinRegA = lm(IDH ~ ., data = colb[,c(1,7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
#resultados
summary(LinRegA)
summary(LinRegB)
LinRegA = lm(IDH ~ ., data = colb[,c(1:7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
summary(LinRegA)
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
# que variables y tipo
str(colb)
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
summary(colb)
hist(colb$IDH)
hist(colb$Poblacion.Cabecera)
hist(colb$Poblacion.Resto)
colb$cabeLog=log(colb$Poblacion.Cabecera)
colb$restoLog=log(colb$Poblacion.Resto)
hist(colb$cabeLog)
hist(colb$restoLog)
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
corrDem
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
#ver:
corrTableX
plot(colb[,explanans])
LinRegA = lm(IDH ~ ., data = colb[,c(1,7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
#resultados
summary(LinRegA)
summary(LinRegB)
# carga de datos
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
library(stargazer)
vars1 <- colb[, c(1,3,4)]
stargazer(vars1,title = "Medidas estadisticas", label = "stats",summary.stat = c("n", "median"))
par(mfrow=c(2,2))
hist(colb$IDH,main="Histograma IDH",ylab="Frecuencia", xlab = "IDH",col = "red")
hist(colb$Poblacion.Cabecera,main="Histograma Poblacion Cabecera",ylab="Frecuencia", xlab = "Pob. Cabecera", col = "red")
hist(colb$Poblacion.Resto,main="Histograma Poblacion Resto",ylab="Frecuencia", xlab = "Pob. Resto",col = "red")
par(mfrow=c(2,2))
colb$cabeLog=log(colb$Poblacion.Cabecera)
colb$restoLog=log(colb$Poblacion.Resto)
hist(colb$IDH,main="Histograma IDH",ylab="Frecuencia", xlab = "IDH",col = "red")
hist(colb$cabeLog,main="Histograma Poblacion Cabecera",ylab="Frecuencia", xlab = "Pob. Cabecera", col = "red")
hist(colb$restoLog,main="Histograma Poblacion Resto",ylab="Frecuencia", xlab = "Pob. Resto",col = "red")
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
stargazer(corrDem, title="CorrelaciÃ³n del IDH con las poblaciones",label = "corrDem")
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
stargazer(corrTableX, title="CorrelaciÃ³n entre variables independientes",label = 'corrTableX')
library(corrplot)
plot(colb[,explanans])
LinRegA = lm(IDH ~ ., data = colb[,c(1:7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
summary(LinRegA)
# carga de datos
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
View(colb)
View(colb)
library(stargazer)
vars1 <- colb[, c(1,3,4)]
stargazer(vars1,title = "Medidas estadisticas", label = "stats",summary.stat = c("n", "median"))
par(mfrow=c(2,2))
hist(colb$IDH,main="Histograma IDH",ylab="Frecuencia", xlab = "IDH",col = "red")
hist(colb$Poblacion.Cabecera,main="Histograma Poblacion Cabecera",ylab="Frecuencia", xlab = "Pob. Cabecera", col = "red")
hist(colb$Poblacion.Resto,main="Histograma Poblacion Resto",ylab="Frecuencia", xlab = "Pob. Resto",col = "red")
par(mfrow=c(2,2))
colb$cabeLog=log(colb$Poblacion.Cabecera)
colb$restoLog=log(colb$Poblacion.Resto)
hist(colb$IDH,main="Histograma IDH",ylab="Frecuencia", xlab = "IDH",col = "red")
hist(colb$cabeLog,main="Histograma Poblacion Cabecera",ylab="Frecuencia", xlab = "Pob. Cabecera", col = "red")
hist(colb$restoLog,main="Histograma Poblacion Resto",ylab="Frecuencia", xlab = "Pob. Resto",col = "red")
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
stargazer(corrDem, title="CorrelaciÃ³n del IDH con las poblaciones",label = "corrDem")
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
stargazer(corrTableX, title="CorrelaciÃ³n entre variables independientes",label = 'corrTableX')
library(corrplot)
plot(colb[,explanans])
LinRegA = lm(IDH ~ ., data = colb[,c(1:7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
summary(LinRegA)
View(colb)
View(colb)
View(LinRegA)
# lo tenemos:
plot(mapCol)
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
# lo tenemos:
plot(mapCol)
head(mapCol@data)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
# cuantas regiones me quedaron luego del merge?
nrow(mapCol_idh)  # todas!!...
# que tengo?:
names(mapCol_idh)
# nombre de la variables que usarÃ©:
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# aÃ±ado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# lo tengo?
names(mapCol_idh)
library(RColorBrewer)
library(classInt)
#variable a colorear
varToPLot=mapCol_idh$cluster
# decidir color:
unique(varToPLot)
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
#preparo colores
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
# grafico mapa basico
plot(mapCol,col='grey',border=0)
# grafico mapa cluster
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.6,
bty = "n",
title="conglomerado")
# lo tenemos:
plot(mapCol)
head(mapCol@data)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
# cuantas regiones me quedaron luego del merge?
nrow(mapCol_idh)  # todas!!...
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
library(cluster)
dataCluster=mapCol_idh@data[,c(dimensions)]
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
clusters=as.data.frame(resultado$cluster)
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
sub_colb=colb[,c(1:2,7:8)]
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
sub_colb=colb[,c(1:2,7:8)]
# carga de datos
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
sub_colb=colb[,c(1:2,7:8)]
# carga de datos
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
library(stargazer)
vars1 <- colb[, c(1,3,4)]
stargazer(vars1,title = "Medidas estadisticas", label = "stats",summary.stat = c("n", "median"))
par(mfrow=c(2,2))
hist(colb$IDH,main="Histograma IDH",ylab="Frecuencia", xlab = "IDH",col = "red")
hist(colb$Poblacion.Cabecera,main="Histograma Poblacion Cabecera",ylab="Frecuencia", xlab = "Pob. Cabecera", col = "red")
hist(colb$Poblacion.Resto,main="Histograma Poblacion Resto",ylab="Frecuencia", xlab = "Pob. Resto",col = "red")
par(mfrow=c(2,2))
colb$cabeLog=log(colb$Poblacion.Cabecera)
colb$restoLog=log(colb$Poblacion.Resto)
hist(colb$IDH,main="Histograma IDH",ylab="Frecuencia", xlab = "IDH",col = "red")
hist(colb$cabeLog,main="Histograma Poblacion Cabecera",ylab="Frecuencia", xlab = "Pob. Cabecera", col = "red")
hist(colb$restoLog,main="Histograma Poblacion Resto",ylab="Frecuencia", xlab = "Pob. Resto",col = "red")
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
stargazer(corrDem, title="CorrelaciÃ³n del IDH con las poblaciones",label = "corrDem")
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
stargazer(corrDem, title="CorrelaciÃ³n del IDH con las poblaciones",label = "corrDem")
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
stargazer(corrTableX, title="CorrelaciÃ³n entre variables independientes",label = 'corrTableX')
library(corrplot)
plot(colb[,explanans])
LinRegA = lm(IDH ~ ., data = colb[,c(1,7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
stargazer(LinRegA,LinRegB,
title = "Modelos de Regresion",
label = "regresiones")
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
nrow(mapCol_idh)
names(mapCol_idh)
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
library(cluster)
dataCluster=mapCol_idh@data[,c(dimensions)]
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
clusters=as.data.frame(resultado$cluster)
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
library(RColorBrewer)
library(classInt)
varToPLot=mapCol_idh$cluster
unique(varToPLot)
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(mapCol,col='grey',border=0)
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.6,
bty = "n",
title="conglomerado")
varToPLot=mapCol_idh$cluster
unique(varToPLot)
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
nrow(mapCol_idh)
names(mapCol_idh)
library(RColorBrewer)
library(classInt)
varToPLot=mapCol_idh$cluster
unique(varToPLot)
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(colb[,explanans])
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
# que variables y tipo
str(colb)
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
summary(colb)
hist(colb$IDH)
hist(colb$Poblacion.Cabecera)
hist(colb$Poblacion.Resto)
colb$cabeLog=log(colb$Poblacion.Cabecera)
colb$restoLog=log(colb$Poblacion.Resto)
hist(colb$cabeLog)
hist(colb$restoLog)
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
corrDem
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
#ver:
corrTableX
plot(colb[,explanans])
LinRegA = lm(IDH ~ ., data = colb[,c(1,7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
#resultados
summary(LinRegA)
summary(LinRegB)
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
# lo tenemos:
plot(mapCol)
head(mapCol@data)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
# cuantas regiones me quedaron luego del merge?
nrow(mapCol_idh)  # todas!!...
# que tengo?:
names(mapCol_idh)
# nombre de la variables que usarÃ©:
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# aÃ±ado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# lo tengo?
names(mapCol_idh)
library(RColorBrewer)
library(classInt)
#variable a colorear
varToPLot=mapCol_idh$cluster
# decidir color:
unique(varToPLot)
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
#preparo colores
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
# grafico mapa basico
plot(mapCol,col='grey',border=0)
# grafico mapa cluster
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.6,
bty = "n",
title="conglomerado")
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
# que variables y tipo
str(colb)
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
summary(colb)
hist(colb$IDH)
hist(colb$Poblacion.Cabecera)
hist(colb$Poblacion.Resto)
colb$cabeLog=log(colb$Poblacion.Cabecera)
colb$restoLog=log(colb$Poblacion.Resto)
hist(colb$cabeLog)
hist(colb$restoLog)
hist(colb$cabeLog)
hist(colb$restoLog)
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
corrDem
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
#ver:
corrTableX
plot(colb[,explanans])
LinRegA = lm(IDH ~ ., data = colb[,c(1,7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
#resultados
summary(LinRegA)
summary(LinRegB)
